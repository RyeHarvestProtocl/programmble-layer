// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v4.25.2
// source: programmableLayer/programmableLayer.proto

package programmableLayer

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Greeter_SayHello_FullMethodName = "/programmableLayer.Greeter/SayHello"
)

// GreeterClient is the client API for Greeter service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// greeter
type GreeterClient interface {
	SayHello(ctx context.Context, in *HelloRequest, opts ...grpc.CallOption) (*HelloReply, error)
}

type greeterClient struct {
	cc grpc.ClientConnInterface
}

func NewGreeterClient(cc grpc.ClientConnInterface) GreeterClient {
	return &greeterClient{cc}
}

func (c *greeterClient) SayHello(ctx context.Context, in *HelloRequest, opts ...grpc.CallOption) (*HelloReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(HelloReply)
	err := c.cc.Invoke(ctx, Greeter_SayHello_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GreeterServer is the server API for Greeter service.
// All implementations must embed UnimplementedGreeterServer
// for forward compatibility.
//
// greeter
type GreeterServer interface {
	SayHello(context.Context, *HelloRequest) (*HelloReply, error)
	mustEmbedUnimplementedGreeterServer()
}

// UnimplementedGreeterServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedGreeterServer struct{}

func (UnimplementedGreeterServer) SayHello(context.Context, *HelloRequest) (*HelloReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SayHello not implemented")
}
func (UnimplementedGreeterServer) mustEmbedUnimplementedGreeterServer() {}
func (UnimplementedGreeterServer) testEmbeddedByValue()                 {}

// UnsafeGreeterServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GreeterServer will
// result in compilation errors.
type UnsafeGreeterServer interface {
	mustEmbedUnimplementedGreeterServer()
}

func RegisterGreeterServer(s grpc.ServiceRegistrar, srv GreeterServer) {
	// If the following call pancis, it indicates UnimplementedGreeterServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Greeter_ServiceDesc, srv)
}

func _Greeter_SayHello_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HelloRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GreeterServer).SayHello(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Greeter_SayHello_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GreeterServer).SayHello(ctx, req.(*HelloRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Greeter_ServiceDesc is the grpc.ServiceDesc for Greeter service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Greeter_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "programmableLayer.Greeter",
	HandlerType: (*GreeterServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SayHello",
			Handler:    _Greeter_SayHello_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "programmableLayer/programmableLayer.proto",
}

const (
	FundTxHandler_SubmitFundRequest_FullMethodName = "/programmableLayer.FundTxHandler/SubmitFundRequest"
)

// FundTxHandlerClient is the client API for FundTxHandler service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// send Fund request
type FundTxHandlerClient interface {
	SubmitFundRequest(ctx context.Context, in *FundRequest, opts ...grpc.CallOption) (*FundRequestReply, error)
}

type fundTxHandlerClient struct {
	cc grpc.ClientConnInterface
}

func NewFundTxHandlerClient(cc grpc.ClientConnInterface) FundTxHandlerClient {
	return &fundTxHandlerClient{cc}
}

func (c *fundTxHandlerClient) SubmitFundRequest(ctx context.Context, in *FundRequest, opts ...grpc.CallOption) (*FundRequestReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(FundRequestReply)
	err := c.cc.Invoke(ctx, FundTxHandler_SubmitFundRequest_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FundTxHandlerServer is the server API for FundTxHandler service.
// All implementations must embed UnimplementedFundTxHandlerServer
// for forward compatibility.
//
// send Fund request
type FundTxHandlerServer interface {
	SubmitFundRequest(context.Context, *FundRequest) (*FundRequestReply, error)
	mustEmbedUnimplementedFundTxHandlerServer()
}

// UnimplementedFundTxHandlerServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedFundTxHandlerServer struct{}

func (UnimplementedFundTxHandlerServer) SubmitFundRequest(context.Context, *FundRequest) (*FundRequestReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SubmitFundRequest not implemented")
}
func (UnimplementedFundTxHandlerServer) mustEmbedUnimplementedFundTxHandlerServer() {}
func (UnimplementedFundTxHandlerServer) testEmbeddedByValue()                       {}

// UnsafeFundTxHandlerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FundTxHandlerServer will
// result in compilation errors.
type UnsafeFundTxHandlerServer interface {
	mustEmbedUnimplementedFundTxHandlerServer()
}

func RegisterFundTxHandlerServer(s grpc.ServiceRegistrar, srv FundTxHandlerServer) {
	// If the following call pancis, it indicates UnimplementedFundTxHandlerServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&FundTxHandler_ServiceDesc, srv)
}

func _FundTxHandler_SubmitFundRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FundRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FundTxHandlerServer).SubmitFundRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FundTxHandler_SubmitFundRequest_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FundTxHandlerServer).SubmitFundRequest(ctx, req.(*FundRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// FundTxHandler_ServiceDesc is the grpc.ServiceDesc for FundTxHandler service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var FundTxHandler_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "programmableLayer.FundTxHandler",
	HandlerType: (*FundTxHandlerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SubmitFundRequest",
			Handler:    _FundTxHandler_SubmitFundRequest_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "programmableLayer/programmableLayer.proto",
}

const (
	MintTxHandler_SubmitMintRequest_FullMethodName = "/programmableLayer.MintTxHandler/SubmitMintRequest"
)

// MintTxHandlerClient is the client API for MintTxHandler service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// send mint request
type MintTxHandlerClient interface {
	SubmitMintRequest(ctx context.Context, in *MintRequest, opts ...grpc.CallOption) (*MintRequestReply, error)
}

type mintTxHandlerClient struct {
	cc grpc.ClientConnInterface
}

func NewMintTxHandlerClient(cc grpc.ClientConnInterface) MintTxHandlerClient {
	return &mintTxHandlerClient{cc}
}

func (c *mintTxHandlerClient) SubmitMintRequest(ctx context.Context, in *MintRequest, opts ...grpc.CallOption) (*MintRequestReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MintRequestReply)
	err := c.cc.Invoke(ctx, MintTxHandler_SubmitMintRequest_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MintTxHandlerServer is the server API for MintTxHandler service.
// All implementations must embed UnimplementedMintTxHandlerServer
// for forward compatibility.
//
// send mint request
type MintTxHandlerServer interface {
	SubmitMintRequest(context.Context, *MintRequest) (*MintRequestReply, error)
	mustEmbedUnimplementedMintTxHandlerServer()
}

// UnimplementedMintTxHandlerServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedMintTxHandlerServer struct{}

func (UnimplementedMintTxHandlerServer) SubmitMintRequest(context.Context, *MintRequest) (*MintRequestReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SubmitMintRequest not implemented")
}
func (UnimplementedMintTxHandlerServer) mustEmbedUnimplementedMintTxHandlerServer() {}
func (UnimplementedMintTxHandlerServer) testEmbeddedByValue()                       {}

// UnsafeMintTxHandlerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MintTxHandlerServer will
// result in compilation errors.
type UnsafeMintTxHandlerServer interface {
	mustEmbedUnimplementedMintTxHandlerServer()
}

func RegisterMintTxHandlerServer(s grpc.ServiceRegistrar, srv MintTxHandlerServer) {
	// If the following call pancis, it indicates UnimplementedMintTxHandlerServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&MintTxHandler_ServiceDesc, srv)
}

func _MintTxHandler_SubmitMintRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MintRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MintTxHandlerServer).SubmitMintRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MintTxHandler_SubmitMintRequest_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MintTxHandlerServer).SubmitMintRequest(ctx, req.(*MintRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// MintTxHandler_ServiceDesc is the grpc.ServiceDesc for MintTxHandler service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MintTxHandler_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "programmableLayer.MintTxHandler",
	HandlerType: (*MintTxHandlerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SubmitMintRequest",
			Handler:    _MintTxHandler_SubmitMintRequest_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "programmableLayer/programmableLayer.proto",
}

const (
	ClaimTxHandler_SubmitClaimRequest_FullMethodName = "/programmableLayer.ClaimTxHandler/SubmitClaimRequest"
)

// ClaimTxHandlerClient is the client API for ClaimTxHandler service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// send claim request
type ClaimTxHandlerClient interface {
	SubmitClaimRequest(ctx context.Context, in *ClaimRequest, opts ...grpc.CallOption) (*ClaimRequestReply, error)
}

type claimTxHandlerClient struct {
	cc grpc.ClientConnInterface
}

func NewClaimTxHandlerClient(cc grpc.ClientConnInterface) ClaimTxHandlerClient {
	return &claimTxHandlerClient{cc}
}

func (c *claimTxHandlerClient) SubmitClaimRequest(ctx context.Context, in *ClaimRequest, opts ...grpc.CallOption) (*ClaimRequestReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ClaimRequestReply)
	err := c.cc.Invoke(ctx, ClaimTxHandler_SubmitClaimRequest_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ClaimTxHandlerServer is the server API for ClaimTxHandler service.
// All implementations must embed UnimplementedClaimTxHandlerServer
// for forward compatibility.
//
// send claim request
type ClaimTxHandlerServer interface {
	SubmitClaimRequest(context.Context, *ClaimRequest) (*ClaimRequestReply, error)
	mustEmbedUnimplementedClaimTxHandlerServer()
}

// UnimplementedClaimTxHandlerServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedClaimTxHandlerServer struct{}

func (UnimplementedClaimTxHandlerServer) SubmitClaimRequest(context.Context, *ClaimRequest) (*ClaimRequestReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SubmitClaimRequest not implemented")
}
func (UnimplementedClaimTxHandlerServer) mustEmbedUnimplementedClaimTxHandlerServer() {}
func (UnimplementedClaimTxHandlerServer) testEmbeddedByValue()                        {}

// UnsafeClaimTxHandlerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ClaimTxHandlerServer will
// result in compilation errors.
type UnsafeClaimTxHandlerServer interface {
	mustEmbedUnimplementedClaimTxHandlerServer()
}

func RegisterClaimTxHandlerServer(s grpc.ServiceRegistrar, srv ClaimTxHandlerServer) {
	// If the following call pancis, it indicates UnimplementedClaimTxHandlerServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&ClaimTxHandler_ServiceDesc, srv)
}

func _ClaimTxHandler_SubmitClaimRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClaimRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClaimTxHandlerServer).SubmitClaimRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ClaimTxHandler_SubmitClaimRequest_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClaimTxHandlerServer).SubmitClaimRequest(ctx, req.(*ClaimRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ClaimTxHandler_ServiceDesc is the grpc.ServiceDesc for ClaimTxHandler service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ClaimTxHandler_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "programmableLayer.ClaimTxHandler",
	HandlerType: (*ClaimTxHandlerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SubmitClaimRequest",
			Handler:    _ClaimTxHandler_SubmitClaimRequest_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "programmableLayer/programmableLayer.proto",
}
